// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowTests.DataTable
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DataTableDemoFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DataTableDemoFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DataTableDemoFeature", "\tIn order to demonstrate data tables data transformation\r\n\tAs a Specflow experien" +
                    "ced user\r\n\tI want to write some scenarios using this possibility", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DataTableDemoFeature")))
            {
                SpecflowTests.DataTable.DataTableDemoFeatureFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add new book to the reader")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataTableDemoFeature")]
        public virtual void AddNewBookToTheReader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new book to the reader", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I have electronic reader", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Author",
                        "NumberOfPages"});
            table1.AddRow(new string[] {
                        "Dependency Injection in .NET",
                        "M.Seemann",
                        "900"});
#line 11
 testRunner.When("I add new book with properties", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Author",
                        "NumberOfPages"});
            table2.AddRow(new string[] {
                        "Dependency Injection in .NET",
                        "M.Seemann",
                        "900"});
#line 14
 testRunner.Then("new book should be added to the reader", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add several books to the reader")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataTableDemoFeature")]
        public virtual void AddSeveralBooksToTheReader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add several books to the reader", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I have electronic reader", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Author",
                        "NumberOfPages"});
            table3.AddRow(new string[] {
                        "Dependency Injection in .NET",
                        "M. Seemann",
                        "900"});
            table3.AddRow(new string[] {
                        "CLR via C#",
                        "J. Richter",
                        "1300"});
            table3.AddRow(new string[] {
                        "Pro C# 5.0 and the .NET 4.5 Framework",
                        "A. Troelsen",
                        "1450"});
#line 23
 testRunner.When("I add several books with properties", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Author",
                        "NumberOfPages"});
            table4.AddRow(new string[] {
                        "Dependency Injection in .NET",
                        "M. Seemann",
                        "900"});
            table4.AddRow(new string[] {
                        "CLR via C#",
                        "J. Richter",
                        "1300"});
            table4.AddRow(new string[] {
                        "Pro C# 5.0 and the .NET 4.5 Framework",
                        "A. Troelsen",
                        "1450"});
#line 28
 testRunner.Then("new books should be added to the reader", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add new book to the reader with inner properties specified")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataTableDemoFeature")]
        public virtual void AddNewBookToTheReaderWithInnerPropertiesSpecified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new book to the reader with inner properties specified", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have electronic reader", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Author",
                        "NumberOfPages",
                        "StateInReader",
                        "ElectronicInfo.DataFormat",
                        "ElectronicInfo.SizeInMB"});
            table5.AddRow(new string[] {
                        "Dependency Injection in .NET",
                        "M.Seemann",
                        "900",
                        "Unloaded",
                        "Pdf",
                        "45"});
#line 38
 testRunner.When("I add new book with all of properties", ((string)(null)), table5, "When ");
#line 41
 testRunner.Then("new book \'Dependency Injection in .NET\' should be added to the reader", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
