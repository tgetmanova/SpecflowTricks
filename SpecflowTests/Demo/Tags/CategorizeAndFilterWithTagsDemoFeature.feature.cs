// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowTests.Demo.Tags
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CategorizeAndFilterWithTagsFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CategorizeAndFilterWithTagsDemoFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CategorizeAndFilterWithTagsFeature", "\tIn order to demonstrate how we can filter and group test scenarios\r\n\twith Specfl" +
                    "ow tags that are mapped to \'category\'/\'trait\' of unit test\t\r\n\tAs a Specflow expe" +
                    "rienced user\r\n\tI want to write some scenarios using this possibility", ProgrammingLanguage.CSharp, new string[] {
                        "theMostImportantTestsSet",
                        "mandatoryForRegressionTesting"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CategorizeAndFilterWithTagsFeature")))
            {
                SpecflowTests.Demo.Tags.CategorizeAndFilterWithTagsFeatureFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ReadBook(string bookTitle, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "quickRun",
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read book", @__tags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given(string.Format("I have electronic reader with book \'{0}\'", bookTitle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("I turned on my reader", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When(string.Format("I open book \'{0}\'", bookTitle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then(string.Format("Book \'{0}\' should be opened", bookTitle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.And("Feature tags contain \'theMostImportantTestsSet,mandatoryForRegressionTesting\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("Scenario tags contain \'quickRun,positive\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And(string.Format("if Scenario example \'{0}\' is \'The history of Russia\' then Scenario tags also cont" +
                        "ain \'ForSmokeTesting\'", bookTitle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read book: The history of Hungary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CategorizeAndFilterWithTagsFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("theMostImportantTestsSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mandatoryForRegressionTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("quickRun")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "The history of Hungary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookTitle", "The history of Hungary")]
        public virtual void ReadBook_ExampleSet0_TheHistoryOfHungary()
        {
            this.ReadBook("The history of Hungary", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read book: The history of Italy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CategorizeAndFilterWithTagsFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("theMostImportantTestsSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mandatoryForRegressionTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("quickRun")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "The history of Italy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookTitle", "The history of Italy")]
        public virtual void ReadBook_ExampleSet0_TheHistoryOfItaly()
        {
            this.ReadBook("The history of Italy", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read book: The history of Russia")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CategorizeAndFilterWithTagsFeature")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("theMostImportantTestsSet")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mandatoryForRegressionTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("quickRun")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ForSmokeTesting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "The history of Russia")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookTitle", "The history of Russia")]
        public virtual void ReadBook_ExampleSet1_TheHistoryOfRussia()
        {
            this.ReadBook("The history of Russia", new string[] {
                        "ForSmokeTesting"});
#line hidden
        }
    }
}
#pragma warning restore
#endregion
